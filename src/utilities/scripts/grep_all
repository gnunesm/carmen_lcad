#!/bin/bash

DEFAULT_DIRS="\$CARMEN_HOME/src  \$CARMEN_HOME/sharedlib  \$CARMEN_HOME/bin  \$CARMEN_HOME/data/gui"
DEFAULT_TYPES=".c .cpp .c++ .cc .cxx .C .h .hpp .h++ .hxx .H .py .ini .sh .glade Makefile README* readme*"
RESULT_FILE="GREP.txt"

function display_usage_exit()
{
	if [[ "$2" ]]; then echo -e "\n$2\n"; fi
	echo -e "\nThis script performs recursive grep search of patterns in all files of given directories and types\n"
	echo -e "Usage: $0  <mandatory patterns>  -a <alternative patterns>  -v <void patterns>  -d <directories>  -t <file types>\n"
	echo -e "       default dirs:  $DEFAULT_DIRS"
	echo -e "       default types: $DEFAULT_TYPES\n"
	exit "$1"
}

function backslash_every_char()
{
	sed -e 's/./\\&/g; 1{$s/^$/""/}; 1!s/^/"/; $!s/$/"/' <<< "$1"
}

function single_quotes()
{
	sed -e "s/'/'\\\\''/g; 1s/^/'/; \$s/\$/'/" <<< "$1"
}

if [[ $# -eq 0 ]] || [[ "$1" = "-h" ]]; then display_usage_exit 1; fi

LIST=MUST

for ARG in "$@"; do
	if [[ $ARG = -* ]]; then
		if [[ $ARG = -any ]] || [[ $ARG = -a ]]; then
			LIST=ANY
		elif [[ $ARG = -void ]] || [[ $ARG = -v ]]; then
			LIST=VOID
		elif [[ $ARG = -dirs ]] || [[ $ARG = -d ]]; then
			LIST=DIRS
		elif [[ $ARG = -types ]] || [[ $ARG = -t ]]; then
			LIST=TYPES
		else
			display_usage_exit 1 "$ARG: Invalid argument"
		fi
		continue
	fi

	ITEM=$(single_quotes "$ARG")
	case "$LIST" in
		MUST)
			if [[ "$MUST_PATTERNS" = "" ]]; then FIRST_PATTERN="$ITEM"; fi
			MUST_PATTERNS="$MUST_PATTERNS | grep $ITEM"
			ALL_PATTERNS="$ALL_PATTERNS -e $ITEM"
			;;
		ANY)
			ANY_PATTERNS="$ANY_PATTERNS -e $ITEM"
			ALL_PATTERNS="$ALL_PATTERNS -e $ITEM"
			;;
		VOID)
			if [[ "$VOID_PATTERNS" = "" ]]; then FIRST_VOID="$ITEM"; fi
			VOID_PATTERNS="$VOID_PATTERNS | grep -v $ITEM"
			;;
		DIRS)
			DIRS="$DIRS $ITEM"
			;;
		TYPES)
			if [[ "$TYPES" = "" ]]; then TYPES="$ARG"; else TYPES="$TYPES $ARG"; fi
			;;
	esac
done

if [[ "$ALL_PATTERNS" = "" ]]; then
	if [[ "$VOID_PATTERNS" = "" ]]; then display_usage_exit 1 "There is no given pattern to search"; fi
	ALL_PATTERNS="''"
	ANY_PATTERNS=" -v $FIRST_VOID"
	POS=$((${#FIRST_VOID} + 11))
	VOID_PATTERNS=${VOID_PATTERNS:$POS}
fi

if [[ "$ANY_PATTERNS" = "" ]]; then
	ANY_PATTERNS=" -e $FIRST_PATTERN"
	POS=$((${#FIRST_PATTERN} + 8))
	MUST_PATTERNS=${MUST_PATTERNS:$POS}
fi

if [[ "$DIRS" = "" ]];   then DIRS=$(eval echo "$DEFAULT_DIRS"); fi
if [[ "$TYPES" = "" ]];  then TYPES="$DEFAULT_TYPES"; fi
if [[ $TYPES = *" "* ]]; then TYPES="{${TYPES// /,}}"; fi

eval grep -nrI $ANY_PATTERNS --include="*$TYPES" $DIRS $MUST_PATTERNS $VOID_PATTERNS > $RESULT_FILE
echo
eval grep $ALL_PATTERNS --color=auto $RESULT_FILE

LINES=$(wc -l $RESULT_FILE | cut -d' ' -f 1)
if (( $LINES > 1 )); then S=s; fi
echo -e "\n$LINES line$S found (See $RESULT_FILE)\n"

